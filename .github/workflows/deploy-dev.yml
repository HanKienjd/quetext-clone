name: Build, Test & Deploy

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
      - name: Create .env file
        run: |
          echo "MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}" >> .env.development
          echo "MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}" >> .env.development
          echo "MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}" >> .env.development
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env.development
          echo "NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}" >> .env.development
          echo "COPYLEAKS_EMAIL=${{ secrets.COPYLEAKS_EMAIL }}" >> .env.development
          echo "COPYLEAKS_API_KEY=${{ secrets.COPYLEAKS_API_KEY }}" >> .env.development
          echo "API_URL_AUTH=${{ secrets.API_URL_AUTH }}" >> .env.development
          echo "API_URL_BASE=${{ secrets.API_URL_BASE }}" >> .env.development

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build
      - name: Docker Login
        if: github.ref == 'refs/heads/develop'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/develop'
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/quetext-clone-dev:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/quetext-clone-dev:latest

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest

    steps:
      - name: SSH into server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Set Docker image and container name
             IMAGE_NAME="${{ secrets.DOCKER_HUB_USERNAME }}//quetext-clone-dev:latest"
             CONTAINER_NAME="quetext-clone-dev"
            
             # Pull the latest image
             docker pull $IMAGE_NAME
            
             # Stop and remove existing container if it exists
             if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
               docker stop $CONTAINER_NAME
               docker rm $CONTAINER_NAME
             fi
            
             # Run new container
             docker run -d \
               --name $CONTAINER_NAME \
               -p 3001:3001 \
               -e NODE_ENV=development \
               --restart unless-stopped \
               $IMAGE_NAME
